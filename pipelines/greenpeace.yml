#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#@ cluster = data.values.cluster or assert.fail("cluster must be specified")

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: '0.13.5'

- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: greenpeace
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/greenpeace.git
    private_key: ((greenpeace_private_key))

#@ if cluster == "production":
- name: boarding-pass
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/boarding-pass.git
    private_key: ((greenpeace_private_key))

- name: boarding-pass-image
  type: registry-image
  icon: docker
  source:
    repository: gcr.io/cf-concourse-production/boarding-pass
    tag: latest
    username: _json_key
    password: ((greenpeace_gcp_credentials_json))


- name: oci-build-task
  type: registry-image
  icon: docker
  source: {repository: vito/oci-build-task}
#@ end

- name: daily
  type: time
  icon: clock-outline
  source:
    start: 2:00 AM
    stop: 3:00 AM

- name: terraform
  type: terraform
  icon: terraform
  source:
    env_name: #@ cluster
    backend_type: gcs
    backend_config:
      bucket: concourse-greenpeace
      prefix: terraform
      credentials: ((greenpeace_gcp_credentials_json))
    vars:
      credentials: ((greenpeace_gcp_credentials_json))

- name: secrets
  type: gcs
  icon: database-lock
  source:
    bucket: concourse-greenpeace
    json_key: ((greenpeace_gcp_credentials_json))
    versioned_file: #@ "vault/" + cluster + "/data.tar"

- name: production-secrets
  type: gcs
  icon: database-lock
  source:
    bucket: concourse-greenpeace
    json_key: ((greenpeace_gcp_credentials_json))
    versioned_file: vault/production/data.tar

- name: root-token-enc
  type: gcs
  icon: lastpass
  source:
    bucket: concourse-greenpeace
    json_key: ((greenpeace_gcp_credentials_json))
    versioned_file: #@ "vault/" + cluster + "/root-token.enc"

groups:
- name: terraform
  jobs:
  - terraform
  - terraform-destroy
- name: vault
  jobs:
  - sync-secrets-with-production
  - backup-secrets
  - initialize-vault
- name: all
  jobs:
  - '*'

jobs:
- name: sync-secrets-with-production
  plan:
  - get: production-secrets
  - put: secrets
    params:
      file: production-secrets/data.tar

#@ if cluster == "production":
- name: build-boarding-pass
  plan:
  - get: greenpeace
  - get: oci-build-task
  - get: boarding-pass
    trigger: true
  - task: build-boarding-pass
    file: boarding-pass/ci/build.yml
  - task: build
    image: oci-build-task
    privileged: true
    config:
      platform: linux
      params: {CONTEXT: greenpeace/dockerfiles/boarding_pass}
      inputs:
      - {name: greenpeace}
      - {name: static-content, path: greenpeace/dockerfiles/boarding_pass/static-content}
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: boarding-pass-image
    params: {image: image/image.tar}
#@ end

- name: terraform
  max_in_flight: 1
  plan:
  - get: greenpeace
    trigger: true
  #@ vars = {}
  #@ if cluster == "production":
  - get: boarding-pass-image
    passed: [build-boarding-pass]
    trigger: true
  - load_var: boarding_pass_image_digest
    file: boarding-pass-image/digest
    #@ vars["macstadium_ip"] = "((macstadium.ip))"
    #@ vars["macstadium_username"] = "((macstadium.username))"
    #@ vars["macstadium_password"] = "((macstadium.password))"
    #@ vars["boarding_pass_image_digest"] = "((.:boarding_pass_image_digest))"
  #@ end
  - put: terraform
    params:
      terraform_source: #@ "greenpeace/terraform/" + cluster
      vars: #@ vars

- name: initialize-vault
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: greenpeace
    - get: secrets
      trigger: true
      params:
        unpack: true
    - get: terraform
      trigger: true
      passed: [terraform]
      params:
        output_statefile: true
  - task: compile-vault-backend-migrator
    file: greenpeace/tasks/compile.yml
    params:
      CONTEXT: vendor/vault-backend-migrator
    input_mapping:
      repo: greenpeace
    output_mapping:
      compiled: vault-backend-migrator
  - task: initialize-vault
    file: greenpeace/tasks/initialize-vault.yml
    params:
      GCP_CREDENTIALS_JSON: ((greenpeace_gcp_credentials_json))
      GREENPEACE_PRIVATE_KEY: ((greenpeace_private_key))
      CLUSTER_NAME: #@ cluster
      TERRAFORM_VERSION: '0.13.5'

- name: backup-secrets
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: greenpeace
    - get: terraform
      params:
        output_statefile: true
    - get: root-token-enc
    - get: daily
      trigger: true
  - task: compile-vault-backend-migrator
    file: greenpeace/tasks/compile.yml
    params:
      CONTEXT: vendor/vault-backend-migrator
    input_mapping:
      repo: greenpeace
    output_mapping:
      compiled: vault-backend-migrator
  - task: export-secrets
    file: greenpeace/tasks/export-secrets.yml
    params:
      GCP_CREDENTIALS_JSON: ((greenpeace_gcp_credentials_json))
      TERRAFORM_VERSION: '0.13.5'
  - put: secrets
    params:
      file: secrets/data.tar

- name: terraform-destroy
  max_in_flight: 1
  plan:
  - get: greenpeace
  - put: terraform
    params:
      terraform_source: #@ "greenpeace/terraform/" + cluster
      action: destroy
    get_params:
      action: destroy
