#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#@ cluster = data.values.cluster or assert.fail("cluster must be specified")

.shared:
  tfversion: &tfversion '0.14.7'

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: *tfversion

- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: greenpeace
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/greenpeace.git
    private_key: ((greenpeace_private_key))

- name: greenpeace-tf-module
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/greenpeace.git
    private_key: ((greenpeace_private_key))
    paths:
    - #@ "terraform/environments/" + cluster
    - terraform/dependencies

- name: greenpeace-bump
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/greenpeace.git
    branch: master
    private_key: ((greenpeace_private_key))

#@ if cluster == "production":
- name: golang-darwin
  type: s3
  icon: language-go
  source:
    endpoint: storage.googleapis.com
    bucket: golang
    regexp: 'go(\d+\.\d+(\.\d+)?)\.darwin-amd64\.pkg'

- name: golang-windows
  type: s3
  icon: language-go
  source:
    endpoint: storage.googleapis.com
    bucket: golang
    regexp: 'go(\d+\.\d+(\.\d+)?)\.windows-amd64\.msi'

- name: boarding-pass
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/boarding-pass.git
    private_key: ((greenpeace_private_key))

- name: boarding-pass-image
  type: registry-image
  icon: docker
  source:
    repository: gcr.io/cf-concourse-production/boarding-pass
    tag: latest
    username: _json_key
    password: ((greenpeace_gcp_credentials_json))


- name: oci-build-task
  type: registry-image
  icon: docker
  source: {repository: vito/oci-build-task}
#@ end

- name: daily
  type: time
  icon: clock-outline
  source:
    start: 2:00 AM
    stop: 3:00 AM

- name: terraform
  type: terraform
  icon: terraform
  source:
    env_name: #@ cluster
    backend_type: gcs
    backend_config:
      bucket: concourse-greenpeace
      prefix: terraform
      credentials: ((greenpeace_gcp_credentials_json))
    vars:
      credentials: ((greenpeace_gcp_credentials_json))

- name: secrets
  type: gcs
  icon: database-lock
  source:
    bucket: concourse-greenpeace
    json_key: ((greenpeace_gcp_credentials_json))
    versioned_file: #@ "vault/" + cluster + "/data.tar"

#@ if cluster != "production":
- name: production-secrets
  type: gcs
  icon: database-lock
  source:
    bucket: concourse-greenpeace
    json_key: ((greenpeace_gcp_credentials_json))
    versioned_file: vault/production/data.tar
#@ end

- name: root-token-enc
  type: gcs
  icon: lastpass
  source:
    bucket: concourse-greenpeace
    json_key: ((greenpeace_gcp_credentials_json))
    versioned_file: #@ "vault/" + cluster + "/root-token.enc"

- name: concourse-release-image
  type: registry-image
  icon: docker
  source: {repository: concourse/concourse}

- name: concourse-rc-image
  type: registry-image
  icon: docker
  source:
    repository: concourse/concourse-rc
    pre_releases: true
    debug: true

- name: concourse-dev-image
  type: registry-image
  icon: docker
  source: {repository: concourse/concourse-dev, tag: latest}

#@ if cluster == "production":
- name: concourse-github-release
  type: github-release
  icon: package-variant-closed
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: concourse-windows-rc
  type: gcs
  icon: microsoft-windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(\d+\.\d+\.\d+-.*)-windows-amd64.zip

- name: concourse-darwin-rc
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(\d+\.\d+\.\d+-.*)-darwin-amd64.tgz

- name: concourse-windows-dev
  type: gcs
  icon: microsoft-windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: dev/concourse-(.*).windows.amd64.zip

- name: concourse-darwin-dev
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: dev/concourse-(.*).darwin.amd64.tgz
#@ end

groups:
- name: bump
  jobs:
  - bump-*
- name: terraform
  jobs:
  - terraform
  - terraform-destroy
- name: vault
  jobs:
  #@ if cluster != "production":
  - sync-secrets-with-production
  #@ end
  - backup-secrets
  - initialize-vault
- name: all
  jobs:
  - '*'


#@ def push_bumped_versions(target):
- task: bump-versions
  file: greenpeace/tasks/replace-file.yml
  input_mapping: {repo: greenpeace}
  output_mapping: {repo-bumped: greenpeace-bumped}
  params:
    FILE: #@ "terraform/environments/" + cluster + "/variables.yml"
    #@yaml/text-templated-strings
    CONTENT: |
      concourse_image_repo: ((.:concourse_image_repo))
      concourse_image_digest: ((.:concourse_image_digest))
      (@ if cluster == "production": -@)
      concourse_windows_bundle_url: ((.:concourse_windows_bundle_url))
      concourse_darwin_bundle_url: ((.:concourse_darwin_bundle_url))
      (@- end @)
    COMMIT: #@ "bump " + cluster + " to concourse " + target
- put: greenpeace-bump
  inputs: [greenpeace-bumped]
  params:
    repository: greenpeace-bumped
    branch: master
#@ end

jobs:
- name: bump-concourse-to-release
  plan:
  - in_parallel:
    - get: greenpeace
    - get: concourse-image
      resource: concourse-release-image
      params: {skip_download: true}
    #@ if cluster == "production":
    - get: concourse-release
      resource: concourse-github-release
    #@ end
  - load_var: concourse_image_repo
    file: concourse-image/repository
  - load_var: concourse_image_digest
    file: concourse-image/digest
  #@ if cluster == "production":
  - task: get-bundle-urls
    file: greenpeace/tasks/get-bundle-urls.yml
  - load_var: concourse_windows_bundle_url
    file: bundle-urls/windows
  - load_var: concourse_darwin_bundle_url
    file: bundle-urls/darwin
  #@ end
  #@ for/end step in push_bumped_versions("release"):
  - #@ step

- name: bump-concourse-to-rc
  plan:
  - in_parallel:
    - get: greenpeace
    - get: concourse-image
      resource: concourse-rc-image
      params: {skip_download: true}
    #@ if cluster == "production":
    - get: concourse-windows
      resource: concourse-windows-rc
      params: {skip_download: "true"}
    - get: concourse-darwin
      resource: concourse-darwin-rc
      params: {skip_download: "true"}
    #@ end
  - load_var: concourse_image_repo
    file: concourse-image/repository
  - load_var: concourse_image_digest
    file: concourse-image/digest
  #@ if cluster == "production":
  - task: convert-windows-url
    file: greenpeace/tasks/convert-gs-url.yml
    input_mapping: {input: concourse-windows}
    output_mapping: {output: windows}
  - task: convert-darwin-url
    file: greenpeace/tasks/convert-gs-url.yml
    input_mapping: {input: concourse-darwin}
    output_mapping: {output: darwin}
  - load_var: concourse_windows_bundle_url
    file: windows/url
  - load_var: concourse_darwin_bundle_url
    file: darwin/url
  #@ end
  #@ for/end step in push_bumped_versions("rc"):
  - #@ step

- name: bump-concourse-to-dev
  plan:
  - in_parallel:
    - get: greenpeace
    - get: concourse-image
      resource: concourse-dev-image
      params: {skip_download: true}
    #@ if cluster == "production":
    - get: concourse-windows
      resource: concourse-windows-dev
      params: {skip_download: "true"}
    - get: concourse-darwin
      resource: concourse-darwin-dev
      params: {skip_download: "true"}
    #@ end
  - load_var: concourse_image_repo
    file: concourse-image/repository
  - load_var: concourse_image_digest
    file: concourse-image/digest
  #@ if cluster == "production":
  - task: convert-windows-url
    file: greenpeace/tasks/convert-gs-url.yml
    input_mapping: {input: concourse-windows}
    output_mapping: {output: windows}
  - task: convert-darwin-url
    file: greenpeace/tasks/convert-gs-url.yml
    input_mapping: {input: concourse-darwin}
    output_mapping: {output: darwin}
  - load_var: concourse_windows_bundle_url
    file: windows/url
  - load_var: concourse_darwin_bundle_url
    file: darwin/url
  #@ end
  #@ for/end step in push_bumped_versions("dev"):
  - #@ step

#@ if cluster != "production":
- name: sync-secrets-with-production
  plan:
  - get: production-secrets
  - put: secrets
    params:
      file: production-secrets/data.tar
#@ end

#@ if cluster == "production":
- name: build-boarding-pass
  plan:
  - get: greenpeace
  - get: oci-build-task
  - get: boarding-pass
    trigger: true
  - task: build-boarding-pass
    file: boarding-pass/ci/build.yml
  - task: build
    image: oci-build-task
    privileged: true
    config:
      platform: linux
      params: {CONTEXT: greenpeace/dockerfiles/boarding_pass}
      inputs:
      - {name: greenpeace}
      - {name: static-content, path: greenpeace/dockerfiles/boarding_pass/static-content}
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: boarding-pass-image
    params: {image: image/image.tar}
#@ end

- name: terraform
  max_in_flight: 1
  plan:
  - get: greenpeace
    resource: greenpeace-tf-module
    trigger: true
  #@ vars = {}
  #@ if cluster == "production":
  - get: golang-darwin
    trigger: true
    params: {skip_download: "true"}
  - load_var: go_darwin_package_url
    file: golang-darwin/url
  - get: golang-windows
    trigger: true
    params: {skip_download: "true"}
  - load_var: go_windows_package_url
    file: golang-windows/url
  - get: boarding-pass-image
    passed: [build-boarding-pass]
    trigger: true
  - load_var: boarding_pass_image_digest
    file: boarding-pass-image/digest
    #@ vars["macstadium_ip"] = "((macstadium.ip))"
    #@ vars["macstadium_username"] = "((macstadium.username))"
    #@ vars["macstadium_password"] = "((macstadium.password))"
    #@ vars["boarding_pass_image_digest"] = "((.:boarding_pass_image_digest))"
    #@ vars["go_windows_package_url"] = "((.:go_windows_package_url))"
    #@ vars["go_darwin_package_url"] = "((.:go_darwin_package_url))"
  #@ end
  - put: terraform
    params:
      terraform_source: #@ "greenpeace/terraform/environments/" + cluster
      vars: #@ vars
      var_files:
      - #@ "greenpeace/terraform/environments/" + cluster + "/variables.yml"

- name: initialize-vault
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: greenpeace
    - get: secrets
      trigger: true
      params:
        unpack: true
    - get: terraform
      trigger: true
      passed: [terraform]
      params:
        output_statefile: true
  - task: compile-vault-backend-migrator
    file: greenpeace/tasks/compile.yml
    params:
      CONTEXT: vendor/vault-backend-migrator
    input_mapping:
      repo: greenpeace
    output_mapping:
      compiled: vault-backend-migrator
  - task: initialize-vault
    file: greenpeace/tasks/initialize-vault.yml
    params:
      GCP_CREDENTIALS_JSON: ((greenpeace_gcp_credentials_json))
      GREENPEACE_PRIVATE_KEY: ((greenpeace_private_key))
      CLUSTER_NAME: #@ cluster
      TERRAFORM_VERSION: *tfversion

- name: backup-secrets
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: greenpeace
    - get: terraform
      params:
        output_statefile: true
    - get: root-token-enc
    - get: daily
      trigger: true
  - task: compile-vault-backend-migrator
    file: greenpeace/tasks/compile.yml
    params:
      CONTEXT: vendor/vault-backend-migrator
    input_mapping:
      repo: greenpeace
    output_mapping:
      compiled: vault-backend-migrator
  - task: export-secrets
    file: greenpeace/tasks/export-secrets.yml
    params:
      GCP_CREDENTIALS_JSON: ((greenpeace_gcp_credentials_json))
      TERRAFORM_VERSION: *tfversion
  - put: secrets
    params:
      file: secrets/data.tar

- name: terraform-destroy
  max_in_flight: 1
  plan:
  - get: greenpeace
  - put: terraform
    params:
      terraform_source: #@ "greenpeace/terraform/" + cluster
      action: destroy
    get_params:
      action: destroy
