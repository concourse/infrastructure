#!/bin/bash

set -e -u

if [ "$#" != "1" ]; then
  echo "usage: $0 old_encryption_key" >&2
  exit 1
fi

cd $(dirname $0)/../terraform/environments/production

old_encryption_key="$1"

echo "Reading terraform output..."

output="$(terraform output -json)"

cluster_name="$(jq -r '.cluster_name.value' <<< $output)"
cluster_zone="$(jq -r '.cluster_zone.value' <<< $output)"
project="$(jq -r '.project.value' <<< $output)"

echo "Grabbing cluster credentials from gcloud..."

gcloud container clusters get-credentials "$cluster_name" --zone "$cluster_zone" --project "$project"

# scale down the ATCs to 0
ci_namespace="$(jq -r '.ci_namespace.value' <<< $output)"
ci_release_name="$(jq -r '.ci_concourse_release_name.value' <<< $output)"
ci_deployment_name=${ci_release_name}-web

echo "Scaling web nodes to 0..."

kubectl scale deployment "$ci_deployment_name" --replicas 0 -n "$ci_namespace"

# wait for the ATCs to stop
echo "Waiting for web nodes to fully stop..."

# TODO: timeout
while true; do
  current_replicas="$(kubectl get deployment "$ci_deployment_name" -n "$ci_namespace" -o jsonpath={.status.replicas})"
  if [ -z "$current_replicas" ] || [ "$current_replicas" -eq "0" ]; then
    break
  fi
  sleep 5
done

echo "Reading values from Helm release..."

values="$(helm get values "$ci_release_name" -n "$ci_namespace" -o json)"

image="$(jq -r .image <<< $values)@$(jq -r .imageDigest <<< $values)"

temp_dir="$(pwd)/../../../sensitive/certs"
rm -rf "$temp_dir"
mkdir "$temp_dir"

function cleanup {
  echo "Cleaning up DB certs..."
  rm -rf "$temp_dir"
}

trap cleanup EXIT

echo "Writing DB certs to temp files..."

jq -r '.secrets.postgresCaCert' <<< $values > "$temp_dir/ca.crt"
chmod 600 "$temp_dir/ca.crt"
jq -r '.secrets.postgresClientCert' <<< $values > "$temp_dir/client.crt"
chmod 600 "$temp_dir/client.crt"
jq -r '.secrets.postgresClientKey' <<< $values > "$temp_dir/client.pem"
chmod 600 "$temp_dir/client.pem"

echo "Re-encrypting..."

# re-encrypt the database with the new key
docker run \
  -v "$temp_dir:/certs" \
  $image migrate \
    --old-encryption-key="$old_encryption_key" \
    --encryption-key="$(jq -r '.secrets.encryptionKey' <<< $values)" \
    --postgres-host="$(jq -r '.concourse.web.postgres.host' <<< $values)" \
    --postgres-database="$(jq -r '.concourse.web.postgres.database' <<< $values)" \
    --postgres-sslmode="$(jq -r '.concourse.web.postgres.sslmode' <<< $values)" \
    --postgres-user="$(jq -r '.secrets.postgresUser' <<< $values)" \
    --postgres-password="$(jq -r '.secrets.postgresPassword' <<< $values)" \
    --postgres-ca-cert="/certs/ca.crt" \
    --postgres-client-cert="/certs/client.crt" \
    --postgres-client-key="/certs/client.pem"

# scale the ATCs back up to n (could be from `helm get values`)
desired="$(jq -r '.web.replicas' <<< $values)"

echo "Scaling web nodes back to ${desired}..."

kubectl scale deployment "$ci_deployment_name" --replicas "$desired" -n "$ci_namespace"

