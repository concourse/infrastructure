#!/bin/bash

set -euo pipefail

dir="$(dirname $0)"

source "$dir/vaulthelpers.sh"
source "$dir/tfhelpers.sh"

fail () {
    echo $@ 1>&2
    exit 1
}

[ -z "$VAULT_ADDR" ] && fail "must set VAULT_ADDR"
[ -z "$VAULT_TOKEN" ] && fail "must set VAULT_TOKEN"

pushd "$dir/../bootstrap" > /dev/null
  gcs_bucket_name="$(tfoutput greenpeace_bucket_name)"
  greenpeace_crypto_key_self_link="$(tfoutput greenpeace_crypto_key_link)"
popd > /dev/null

tmp_dir="$(mktemp -d)"

cleanup () {
  rm -rf "$tmp_dir"
}

trap cleanup EXIT

curl -k -s "$VAULT_ADDR/sys/health" > /dev/null || fail "vault is not healthy (is $VAULT_ADDR/sys/health reachable?)"

pushd "$dir/../vendor/vault-backend-migrator" > /dev/null
  ${VAULT_BACKEND_MIGRATOR_COMMAND:-go run -mod=mod .} -export concourse/ -file "$tmp_dir/secrets.json.raw"
  cat "$tmp_dir/secrets.json.raw" | jq . > "$tmp_dir/secrets.json"
popd > /dev/null

pushd "$tmp_dir" > /dev/null
  generate_keys "$greenpeace_crypto_key_self_link"
  pack "$greenpeace_crypto_key_self_link"
popd > /dev/null

bundle_path="$(realpath "$dir/../sensitive/data.tar")"

mv "$tmp_dir/data.tar" "$bundle_path"

echo "the exported bundle is in $bundle_path"
echo "to upload to greenpeace as the source of truth for future clusters, run:"
echo "  gsutil cp $bundle_path gs://$gcs_bucket_name/vault/production/"
